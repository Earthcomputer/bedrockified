--- a/net/minecraft/world/gen/feature/structure/VillageStructure.java
+++ b/net/minecraft/world/gen/feature/structure/VillageStructure.java
@@ -34,7 +34,7 @@
       int j1 = l < 0 ? l - i + 1 : l;
       int k1 = i1 / i;
       int l1 = j1 / i;
-      ((SharedSeedRandom)random).setLargeFeatureSeedWithSalt(chunkGenerator.getSeed(), k1, l1, 10387312);
+      ((SharedSeedRandom)random).setLargeFeatureSeedWithSalt(chunkGenerator.getSeed(), i1, j1, 10387312); // BEDROCK: initialize RNG with chunk coords rather than region coords (probably bug)
       k1 = k1 * i;
       l1 = l1 * i;
       k1 = k1 + random.nextInt(i - j);
@@ -42,10 +42,11 @@
       return new ChunkPos(k1, l1);
    }
 
-   protected boolean hasStartAt(IChunkGenerator<?> chunkGen, Random rand, int chunkPosX, int chunkPosZ) {
+   // BEDROCK: changed access from protected to public
+   public boolean hasStartAt(IChunkGenerator<?> chunkGen, Random rand, int chunkPosX, int chunkPosZ) {
       ChunkPos chunkpos = this.getStartPositionForPosition(chunkGen, rand, chunkPosX, chunkPosZ, 0, 0);
       if (chunkPosX == chunkpos.x && chunkPosZ == chunkpos.z) {
-         Biome biome = chunkGen.getBiomeProvider().getBiome(new BlockPos((chunkPosX << 4) + 9, 0, (chunkPosZ << 4) + 9), Biomes.DEFAULT);
+         Biome biome = chunkGen.getBiomeProvider().getBiome(new BlockPos((chunkPosX << 4) + 8, 0, (chunkPosZ << 4) + 8), Biomes.DEFAULT); // BEDROCK: +8, not +9
          return chunkGen.hasStructure(biome, Feature.VILLAGE);
       } else {
          return false;
@@ -53,7 +54,7 @@
    }
 
    protected StructureStart makeStart(IWorld worldIn, IChunkGenerator<?> generator, SharedSeedRandom random, int x, int z) {
-      Biome biome = generator.getBiomeProvider().getBiome(new BlockPos((x << 4) + 9, 0, (z << 4) + 9), Biomes.DEFAULT);
+      Biome biome = generator.getBiomeProvider().getBiome(new BlockPos((x << 4) + 8, 0, (z << 4) + 8), Biomes.DEFAULT); // BEDROCK: +8, not +9
       return new VillageStructure.Start(worldIn, generator, random, x, z, biome);
    }
 
